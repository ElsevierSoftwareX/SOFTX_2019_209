
var ClavaJoinPoints = {};


ClavaJoinPoints.builtinType = function(code) {
	return AstFactory.builtinType(code);
}

/**
 * Builds an array type of constant dimensions.
 * 
 * type - Mandatory. Represents the inner type of the array. Can be either a string or a Type join point. A string will be converted to a literal type.
 * dims - Mandatory. Represents the dimensions of the array. Can be either a JavaScript array or variadic integers which are converted to a JavaScript array.
 **/
ClavaJoinPoints.constArrayType = function(type, dims) {
	
	checkDefined(type, 'type', 'ClavaJoinPoints.constArrayType');
	checkDefined(dims, 'dims', 'ClavaJoinPoints.constArrayType');
	
	if(!Array.isArray(dims)) {
		dims = arrayFromArgs(arguments, 1);
	}
	
	var typeofType = typeof type;
	
	if(typeofType === "string") {
		
		return AstFactory.constArrayType(type, dims);
	} else if(Java.type("pt.up.fe.specs.clava.weaver.joinpoints.types.CxxType").class.isInstance(type)) {
		
		return AstFactory.constArrayType(type.getNode(), dims);
	} else {
		
		throw 'ClavaJoinPoints.constArrayType: illegal argument "type", needs to be either a string or a type join point';
	}
}

ClavaJoinPoints.exprLiteral = function(code, type) {
	var typeofType = typeof type;

	if(type === undefined) {
		return AstFactory.exprLiteral(code);
	}
	
	if(typeofType === "string") {
		type = ClavaJoinPoints.builtinType(type);
	}
	

	
	return AstFactory.exprLiteral(code, type);

}; 


ClavaJoinPoints.varDecl = function(varName, init) {
	return AstFactory.varDecl(varName, init);
}

ClavaJoinPoints.varDeclNoInit = function(varName, type) {
	return AstFactory.varDeclNoInit(varName, type);
}

ClavaJoinPoints.typeLiteral = function(typeString) {
	return AstFactory.typeLiteral(typeString);
}



