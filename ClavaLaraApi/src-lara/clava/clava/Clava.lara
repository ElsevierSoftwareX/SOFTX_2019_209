import lara.Io;
import clava.ClavaAspects;


var Clava = {};

/**
 * Enables/disables library SpecsLogger for printing.
 * <p>
 * By default, is disabled.
 */
Clava.useSpecsLogger = false;

/**
 * Returns the standard being used for compilation.
 */
Clava.getStandard = function() {
	call standardResult:ClavaStandard();
	
	return standardResult.standard;
}

Clava.rebuild = function() {
	call Rebuild();
}; 

Clava.getBaseFolder = function() {
	call baseFolderResult:ClavaBaseFolder();
	
	return baseFolderResult.baseFolder;
}; 

Clava.getWeavingFolder = function() {
	call weavingFolderResult:ClavaWeavingFolder();
	
	return weavingFolderResult.weavingFolder;
}; 

Clava.addFile = function($file) {
	if(!$file.instanceOf('file')) {
		println("Clava.addFile: Input must be a 'file' join point, it is a '" + $file.joinPointType + "'");
		return;
	}
	call ClavaAddFile($file);
}; 

Clava.cLinkageBegin = %{
#ifdef __cplusplus
extern "C" {
#endif
}%;

Clava.cLinkageEnd = %{
#ifdef __cplusplus
}
#endif
}%;

/**
 * Launches a Clava weaving session.
 */
Clava.runClava = function(args) {

	// If string, separate arguments
	if(typeof args  === "string") {
		args = ArgumentsParser.newCommandLine().parse(args);
	}

	return ClavaWeaverLauncher.execute(args);
}

/**
 * Creates a clone of the current AST and pushes the clone to the top of the current AST stack.
 */
Clava.pushAst = function() {
	call PushAst();
}

/**
 * Discards the AST at the top of the current AST stack.
 */
Clava.popAst = function() {
	call PopAst();
}


/**
 * Looks for a join point in the current AST.
 *
 * @param $jp a join point from any AST
 * @return the equivalent join point from the AST at the top of the current AST stack
 */
Clava.findJp = function($jp) {
	// Get file
	$file = $jp.ancestor("file");
	if($file === undefined) {
		info("Could not find a file for '" + $jp + "'", "Clava.findJp");
		return undefined;
	}
	
	var $newJp = CxxWeaverApi.findJp($file.filepath, $jp.astId);
	if($newJp === null) {
		info("Could not find the given '" + $jp + "' in the current AST", "Clava.findJp");
		return undefined;
	}
	
	return $newJp;
}


/**
 * Writes the code of the current AST to the given folder.
 */
Clava.writeCode = function(outputFoldername) {
	var outputFolder = Io.mkdir(outputFoldername);
	
	CxxWeaverApi.writeCode(outputFolder);
	
	return outputFolder;
}
