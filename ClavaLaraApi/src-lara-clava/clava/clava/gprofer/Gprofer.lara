import clava.gprofer._GproferAspects;
import clava.Clava;
import lara.cmake.CMaker;
import lara.Io;
import lara.Strings;
import lara._JavaTypes;

function Gprofer(runs, args) {
	
	this._app = Clava.getProgram();
	
	this._runs = defaultValue(runs, 1);
	checkNumber(this._runs, "Gprofer(runs, ...)");
	
	this._args = defaultValue(args, []);
	checkArray(this._args, "Gprofer(..., args)");
	
	this._workingDir = undefined;
	this._deleteWorkingDir = false;
	
	this._data = {};
	this._hotSpots = {};
	
	this._cmaker = this._defaultCmaker();
	
	this._gProfer = _JavaTypes.getGprofer();
}

Gprofer.prototype.getCmaker = function() {
	
	return this._cmaker;
}

Gprofer._EXE_NAME = "gprofer_bin";

Gprofer.prototype._defaultCmaker = function($function) {
	
	var cmaker = new CMaker(Gprofer._EXE_NAME, false);
	
	cmaker.addFlags("-no-pie", "-pg");
	
	// sources
	for (var $file of this._app.descendants('file')) {
		
		if($file.isHeader) {
			continue;
		}
		
		cmaker.getSources().addSource($file.filepath);
	}
	
	// includes
	for(var userInclude of Clava.getIncludeFolders()) {
		debug("Adding include: " + userInclude);
		cmaker.addIncludeFolder(userInclude);
	}
	
	//~ // external includes
	//~ var extraIncludes = Clava.getProgram().extraIncludes;
	//~ for(var extraInclude of extraIncludes) {
		//~ if(Io.isFolder(extraInclude)) {
			//~ debug("Adding external include '" + extraInclude + "'");
			//~ variantCmaker.addIncludeFolder(extraInclude);
		//~ } else {
			//~ debug("Extra include ' " + extraIncludes +  " ' is not a folder");
		//~ }
		
	//~ }
	
	return cmaker;
};

Gprofer._buildName = function($function) {
	
	if(Clava.isCxx()) {
		/* build name based on gprof output */
		var func = $function.name;
		var line = $function.line;
		var file = $function.ancestor('file').name;
		
		return file + "#" + func + "#" + line;	
	}
	
	return $function.name;
};

Gprofer.prototype.setArgs = function(args) {
	
	checkArray(args, "Gprofer.setArgs(args)");
	this._args = args;
	
	return this;
}

Gprofer.prototype.setRuns = function(runs) {
	
	checkNumber(runs, "Gprofer.setRuns(runs)");
	this._runs = runs;
	
	return this;
}

Gprofer.prototype.setWorkingDir = function(workingDir, deleteWorkingDir) {
	
	checkString(workingDir, "Gprofer.setWorkingDir(workingDir, ...)");
	this._workingDir = workingDir;
	
	checkBoolean(deleteWorkingDir, "Gprofer.setWorkingDir(..., deleteWorkingDir)");
	this._deleteWorkingDir = deleteWorkingDir;
	
	return this;
}

Gprofer.prototype.profile = function() {
	
	if(this._workingDir === undefined) {
		
		this._workingDir = Io.getTempFolder('gprofer_' + Strings.uuid());
		this._deleteWorkingDir = true;
	}
	
	// compile the application
	//~ var binary = this._cmaker.build(Clava.getWeavingFolder(),  Io.getPath(Clava.getWeavingFolder(), "build"));
	var binary = this._cmaker.build(this._workingDir,  Io.getPath(this._workingDir, "build"));
	

	
	// call java gprofer
	var data = this._gProfer.profile(binary, this._args, this._runs, this._workingDir, this._deleteWorkingDir);
	var json = this._gProfer.getJsonData(data);
	
	// fill this._data and this._hotSpots
	var obj = JSON.parse(json);
	this._hotSpots = obj.hotspots;
	this._data= obj.table;
	
	return this;
};

Gprofer.prototype.getHotspotNames = function() {
	
	return this._hotSpots;
};

/**
 * 
 * May return undefined if the desired function is a system or library function and not available in the source code.
 * */
Gprofer.prototype.getHotspot = function(rank) {
	
	var _rank = defaultValue(rank, 0);
	checkNumber(_rank, "Gprofer.getHotspot(rank)");
	
	var name = this._hotSpots[_rank];
	
	var f = undefined;
	if(Clava.isCxx()) {
		
		f = call GproferGetCxxFunction(name);
	} else {
		
		f = call GproferGetCFunction(name);
	}
	
	return f.$func;
};

Gprofer.prototype.getPercentage = function($function) {

	checkJoinPointType($function, 'function', 'Gprofer.getPercentage($function)');
	
	return this._get('percentage', $function);
};

Gprofer.prototype.getCalls = function($function) {

	checkJoinPointType($function, 'function', 'Gprofer.getCalls($function)');
	
	return this._get('calls', $function);
};

Gprofer.prototype.getSelfSeconds = function($function) {

	checkJoinPointType($function, 'function', 'Gprofer.getSelfSeconds($function)');
	
	return this._get('selfSeconds', $function);
};

Gprofer.prototype._get = function(type, $function) {
	
	var name = Gprofer._buildName($function);	
	return this._data[name][type];
};
