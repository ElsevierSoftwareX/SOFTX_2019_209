import clava.memoi._MemoiGenHelper;

import lara.util.IdGenerator;
import lara.Io;

/**
 * 		Library to generate memoization tables based on the results from
 * 	the memoiprof profiling library.
 * 
 * @constructor
 * 
 * @param {string[]|...string} reports - the paths of the report files
 * */
function MemoiGen(reports) {
	
	this._reportsPaths = arrayFromArgs(arguments);
	this._reports = _readReports(this._reportsPaths);
	this._isDebug = false;
}

/**
 * @constructor
 * 
 * @param {string} dir - the path of the directory containing the report files
 * */
MemoiGen.fromDir = function(dir) {

	checkString(dir);
	
	var files = Io.getFiles(dir, "*.json", false);

	return new MemoiGen(files);
};


/**
 * 		Prints detailed metrics for each <target function, call site>.
 * 		The data is the average of all reports read.
 * */
MemoiGen.prototype.printAverageMetrics = function() {
	
	for(var report of this._reports) {
		
		println('=== profile metrics ===');
		
		println('  > target function: ' + report.func_name);
		println('  > call sites: ' + report.call_sites);
		println('  > report count: ' + report.reportCount);
		
		var unique = mean(report.elements);
		var total = mean(report.calls);
		
		var repetition = 100 * (total - unique) / total;
		
		var averageRepetition = total / unique;
		
		var top3total = totalTopN(report, 3, report.reportCount);
		var top3percentage = top3total / total * 100;
		
		var top5total = totalTopN(report, 5, report.reportCount);
		var top5percentage = top5total / total * 100;
		
		var top10total = totalTopN(report, 10, report.reportCount);
		var top10percentage = top10total / total * 100;
		
		// print metrics
		println('  > unique inputs: ' + unique);
		println('  > total calls: ' + total);
		println('  > repetition: ' + repetition.toFixed(2) + '%');
		println('  > average repetition: ' + averageRepetition.toFixed(4));
		println('  > top 3: ' + top3percentage.toFixed(2) + '%');
		println('  > top 5: ' + top5percentage.toFixed(2) + '%');
		println('  > top 10: ' + top10percentage.toFixed(2) + '%');
		println('  > elements for 5%: ' + elementsForRatio(report, total, 0.05, report.reportCount));
		println('  > elements for 10%: ' + elementsForRatio(report, total, 0.1, report.reportCount));
		println('  > elements for 25%: ' + elementsForRatio(report, total, 0.25,report.reportCount));
		println('  > elements for 50%: ' + elementsForRatio(report, total, 0.5, report.reportCount));
		print('  > bwp:  '); printBwp(report, report.reportCount);
		println('\n');
	}
}

var MemoiApply = {
	ALWAYS : function(report) {
		if(mean(report.elements, report.reportCount) === 0) {
			debug('skipped - no calls');
			return false;
		}
		
		return true;
	}
};

var MemoiInsert = {
	ALL : function(count, report) {
		return true;
	}
};

var MemoiComparator = {
	MEAN: function(count1, count2, total) {
			
		var mean1 = mean(count1.counter, total);
		var mean2 = mean(count2.counter, total);
		
		if(mean1 > mean2) {
			return 1;
		} else if (mean1 < mean2) {
			return -1;
		} else {
			return 0;
		}
	}
};


/**
 * 		Sets whether to generate debug code in the final application.
 * */
MemoiGen.prototype.setDebug = function(isDebug) {
	
	isDebug = isDebug === undefined ? true : isDebug;
	
	this._isDebug = isDebug;
}

/**
 * 		Makes a table for each <target function, call site> pair. The
 * 	table will have 512 or 65536 elements and will be indexed by 8-bit
 * 	or 16-bit keys.
 * 
 * 		Decides whether to apply memoization to that specific call site
 * 	based on the result of the predicate applyPred, which receives the 
 *  entire report. The default predicate is MemoiApply.ALWAYS.
 * 
 * 		Decides whether to include any single element based on the
 * 	result of the predicate insertPred, which receives the count for
 *  that specific element and the entire report. The default predicate
 *  is MemoiInsert.ALL.
 * 
 * 		In case of a collision, decides which element to use based on
 * 	the order of the counts array, which is ordered from the least
 * 	important element to the most important element. The function
 * 	countComparator will be used as the comparator of each pair of
 * 	elements in the array. The default comparison function will sort
 * 	based on the mean and can be found at MemoiComparator.MEAN.
 * */
MemoiGen.prototype.generate = function(applyPred, insertPred, countComparator, tableSize) {
	
	if(!(tableSize === 256 || tableSize === 65536)) {
		throw "The possible table sizes are 256 and 65536.";
	}
	
	for(var report of this._reports) {
		
		debug('----------------------------------------------------------------------');
		debug('analysing ' + report.func_name + ' at ' + report.call_sites);
		
		if(!applyPred(report)) {
			continue;
		}
		
		// define the comparator based on this report
		var comparatorToUse = function(count1, count2){
			return countComparator(count1, count2, report.reportCounter);
		};

		_generate(insertPred, comparatorToUse, report, this._isDebug);
	}
}


