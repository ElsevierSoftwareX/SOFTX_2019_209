import clava.memoi._MemoiProfAspects;

import clava.ClavaJoinPoints;
import lara.Strings;

/**
 * 		Library to instrument applications with the memoiprof profiling
 * 	library.
 * 
 * @constructor
 * 
 * @param {string} targetName - the name of the target funtion
 * @param {string} id - unique ID representing this function
 * @param {string} reportDir - path to the directory where the report will be saved (does not need trailing /)
 * */
function MemoiProf(targetName, id, reportDir) {
	
	this._targetName = targetName;
	this._id = Strings.replacer(id, ' ', '_');
	this._reportDir = reportDir;
	this._wrapperName = targetName + '_memoi_prof';
	this._monitorName = 'mp_' + this._id;
	this._monitorType = ClavaJoinPoints.typeLiteral('MemoiProf*');
	this._dataType = this._findDataType();
	
	var asp1 = new _Memoi_AddReportCode();
	asp1.call();
}

/**
 * 		The C data types the memoization instrumentation library can handle.
 * 
 * @enum
 * */
var MemoiDataType = new Enumeration({INT: 'INT', DOUBLE: 'DOUBLE', FLOAT: 'FLOAT'});

/**
 * 		Finds the return data type of the target function. If the type is not
 * one of the supported types of the profiling library, this function will throw
 *  an exception.
 * 
 * @private
 * */
MemoiProf.prototype._findDataType = function() {

	var asp1 = new _Memoi_FindType(this._targetName);
	asp1.call();
	var foundType = asp1.foundType;

	switch(foundType) {
		case 'double':
			return MemoiDataType.DOUBLE;
		case 'float':
			return MemoiDataType.FLOAT;
		case 'int':
			return MemoiDataType.INT;
		default:
			throw 'Target function "' + this._targetName + '" is not supported yet.';
	}
}

/**
 * 		Profiles all calls of the target function. This includes making a single
 * wrapper for all calls and adding the memoization profiling code inside this
 * wrapper.
 * */
MemoiProf.prototype.profAll = function() {
	
	var asp1 = new _Memoi_GlobalWrapper(this._targetName, this._wrapperName, this._monitorType, this._monitorName, this._id, this._reportDir, this._dataType);
	asp1.call();
}


/**
 * 		Profiles each call to the target function separately. This includes
 * 	making a wrapper for each call and adding the memoization profiling code
 * 	inside the wrapper.
 * */
MemoiProf.prototype.profEach = function() {
	
	var asp1 = new _Memoi_IndividualWrapper(this._targetName, this._wrapperName, this._monitorType, this._monitorName, this._id, this._reportDir, this._dataType);
	asp1.call();
}

MemoiProf.findTargets = function(pred) {
	
	var asp1 = new _Memoi_FindTargets(pred);
	asp1.call();
	
	return asp1.targets;
}


