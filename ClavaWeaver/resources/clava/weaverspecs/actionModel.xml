<?xml version="1.0"?>
<!-- When changing the joinpoint model, do not forget to update the Clava 
	document. https://docs.google.com/document/d/1uPrvuVBXHSbjDTfehpEeLDz9hgIr8EuJJJvBc5A70rs/edit#heading=h.hii8b3kunout -->
<actions>

	<!-- GENERIC ACTIONS FOR ALL JOINPOINTS -->

	<!-- Replaces the current node with the given node -->
	<action name="replaceWith" return="joinpoint">
		<parameter name="node" type="joinpoint" />
	</action>

	<!-- Inserts node before the given node -->
	<action name="insertBefore" return="joinpoint">
		<parameter name="node" type="joinpoint" />
	</action>

	<!-- Overload which accepts String -->
	<action name="insertBefore" return="joinpoint">
		<parameter name="node" type="String" />
	</action>

	<!-- Inserts node after the given node -->
	<action name="insertAfter" return="joinpoint">
		<parameter name="node" type="joinpoint" />
	</action>

	<!-- Overload which accepts String -->
	<action name="insertAfter" return="joinpoint">
		<parameter name="code" type="String" />
	</action>


	<!-- Removes node associated to the joinpoint from the AST -->
	<action name="detach" />

	<!-- Sets the type of a node, if it has a type -->
	<action name="setType">
		<parameter name="type" type="joinpoint" />
	</action>

	<!-- Performs a deep copy of the node -->
	<action name="copy" return="joinpoint"/>

	<action name="setUserField" return="Object">
		<parameter name="fieldName" type="String" />
		<parameter name="value" type="Object" />	
	</action>
	
	<action name="setUserField" return="Object">
		<parameter name="fieldNameAndValue" type="Map" />
		<!--  <parameter name="value" type="Object" /> -->	
	</action>

	<!-- PROGRAM -->

	<!-- Internally generates the code for the current program and rebuilds 
		the AST -->
	<action name="rebuild" class="program" />

	<action name="addFile" class="program">
		<parameter name="file" type="file" />
	</action>
	
	<action name="push" class="program" />
	
	<action name="pop" class="program" />
	
	<action name="addExtraInclude" class="program" tooltip="adds a path to an include that the current program depends on">
		<parameter name="path" type="String" />
	</action>
	
	<action name="addExtraIncludeFromGit" class="program" tooltip="adds a path based on a git repository to an include that the current program depends on">
		<parameter name="gitRepo" type="String" />
		<parameter name="path" type="String" />
	</action>

	<action name="addExtraSource" class="program" tooltip="adds a path to a source that the current program depends on">
		<parameter name="path" type="String" />
	</action>
	
	<action name="addExtraSourceFromGit" class="program" tooltip="adds a path based on a git repository to a source that the current program depends on">
		<parameter name="gitRepo" type="String" />
		<parameter name="path" type="String" />
	</action>

	<!-- FILE -->

	<!-- Adds an include to the file -->
	<action name="addInclude" class="file">
		<parameter name="name" type="string" />
		<parameter name="isAngled" type="boolean" />
	</action>

	<!-- Overload which sets 'isAngled' to false -->
	<action name="addInclude" class="file">
		<parameter name="name" type="string" />
	</action>

	<!-- Overload which acepts a joinpoint -->
	<action name="addIncludeJp" class="file">
		<parameter name="jp" type="joinpoint" />
	</action>

	<action name="addGlobal" class="file">
		<parameter name="name" type="String" />
		<parameter name="type" type="joinpoint" />
		<parameter name="initValue" type="String" />
	</action>

	<action name="write" class="file">
		<parameter name="destinationFoldername" type="String" />
	</action>

	<!-- Adds a message that will be communicated to the user after weaving 
		ends -->
	<action name="messageToUser">
		<parameter name="message" type="String" />
	</action>

	<!-- CALL -->
	<!-- Changes the name of the call -->
	<action name="setName" class="call">
		<parameter name="name" type="string" />
	</action>
	
	<action name="wrap" class="call" tooltip="Wraps this call with a possibly new wrapping function">
		<parameter name="name" type="string" />
	</action>
	
	<action name="inline" class="call" tooltip="Inlines this call, if possible"/>
	
	<action name="setArgFromString" class="call">
		<parameter name="index" type="int" />
		<parameter name="expr" type="string" />
	</action>
	
	<action name="setArg" class="call">
		<parameter name="index" type="Integer" />
		<parameter name="expr" type="expression" />
	</action>
	
	
	<action name="insertBegin" class="file" tooltip="Adds the node in the join point to the start of the file">
		<parameter name="node" type="joinpoint" />
	</action>
	<action name="insertBegin" class="file" tooltip="Adds the String as a Decl to the end of the file">
		<parameter name="code" type="String" />
	</action>

	<action name="insertEnd" class="file" tooltip="Adds the node in the join point to the end of the file">
		<parameter name="node" type="joinpoint" />
	</action>
	<action name="insertEnd" class="file" tooltip="Adds the String as a Decl to the end of the file">
		<parameter name="code" type="String" />
	</action>
	
	<action name="addFunction" class="file" return="joinpoint" tooltip="Adds a function to the file that returns void and has no parameters">
		<parameter name="name" type="String" />
<!-- 		<parameter name="returnType" type="joinpoint" />
		<parameter name="parameters" type="joinpoint[]" />  -->
	</action>

	<!-- SCOPE -->

	<action name="insertBegin" class="scope" return="joinpoint">
		<parameter name="node" type="joinpoint" />
	</action>
	<action name="insertBegin" class="scope" return="joinpoint">
		<parameter name="code" type="String" />
	</action>

	<action name="insertEnd" class="scope" return="joinpoint">
		<parameter name="node" type="joinpoint" />
	</action>

	<action name="insertEnd" class="scope" return="joinpoint">
		<parameter name="code" type="string" />
	</action>

	<!-- FUNCTON -->
	<action name="clone" class="function">
		<parameter name="newName" type="String" />
	</action>

	<action name="cloneOnFile" class="function" return="String" tooltip="Generates a clone of the provided function on a new file (with a weaver-generated name).">
		<parameter name="newName" type="String" />
	</action>
	
	<action name="cloneOnFile" class="function" return="String" tooltip="Generates a clone of the provided function on a new file (with the provided name).">
		<parameter name="newName" type="String" />
		<parameter name="fileName" type="String" />
	</action>

	<action name="clear" class="scope"
		tooltip="Clears the contents of this scope (untested)" />

	<action name="insertReturn" class="function" tooltip="Inserts the joinpoint before the return points of the function (return statements and implicitly, at the end of the function)">
		<parameter name="code" type="joinpoint" />
	</action>

	<action name="insertReturn" class="function" tooltip="Inserts code as a literal statement before the return points of the function (return statements and implicitly, at the end of the function)">
		<parameter name="code" type="String" />
	</action>
	
	

	<!-- LOOP -->
	<action name="changeKind" class="loop" tooltip="DEPRECATED: use 'setKind' instead">
		<parameter name="kind" type="String" />
	</action>
	
	<action name="setKind" class="loop" tooltip="Sets the kind of the loop">
		<parameter name="kind" type="String" />
	</action>
	
	<action name="setInit" class="loop" tooltip="DEPRECATED: use setInitValue instead.">
		<parameter name="initCode" type="String"/>
	</action>
	
	<action name="setInitValue" class="loop" tooltip="Sets the init statement of the loop. Works with loops of kind 'for'.">
		<parameter name="initCode" type="String"/>
	</action>
	
	<action name="setCond" class="loop" tooltip="Sets the conditional statement of the loop. Works with loops of kind 'for'.">
		<parameter name="condCode" type="String"/>
	</action>
	
	<action name="setStep" class="loop" tooltip="Sets the step statement of the loop. Works with loops of kind 'for'.">
		<parameter name="stepCode" type="String"/>
	</action>

	<action name="setIsParallel" class="loop" tooltip="Sets the attribute 'isParallel' of the loop.">
		<parameter name="isParallel" type="Boolean"/>
	</action>



	<action name="interchange" class="loop" tooltip="Interchanges two for loops, if possible.">
		<parameter name="otherLoop" type="loop" />
	</action>
	
	<action name="tile" class="loop" tooltip="Applies loop tiling to target loop.">
		<parameter name="blockSize" type="String" />
		<parameter name="reference" type="loop" />
	</action>
	
	
	
	<!-- OMP -->
	<action name="setKind" class="omp" tooltip="Sets the directive kind of the OpenMP pragma. Any unsupported clauses will be discarded">
		<parameter name="directiveKind" type="String" />
	</action>
	<action name="removeClause" class="omp" tooltip="Removes any clause of the given kind from the OpenMP pragma">
		<parameter name="clauseKind" type="String" />
	</action>
	<action name="setNumThreads" class="omp" tooltip="Sets the value of the num_threads clause of an OpenMP pragma">
		<parameter name="newExpr" type="String" />
	</action>
	<action name="setProcBind" class="omp" tooltip="Sets the value of the proc_bind clause of an OpenMP pragma">
		<parameter name="newBind" type="String" />
	</action>
	<action name="setPrivate" class="omp" tooltip="Sets the variables of a private clause of an OpenMP pragma">
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setReduction" class="omp" tooltip="Sets the variables for a given kind of a reduction clause of an OpenMP pragma">
		<parameter name="kind" type="String" />
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setDefault" class="omp" tooltip="Sets the value of the default clause of an OpenMP pragma">
		<parameter name="newDefault" type="String" />
	</action>
	<action name="setFirstprivate" class="omp" tooltip="Sets the variables of a firstprivate clause of an OpenMP pragma">
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setLastprivate" class="omp" tooltip="Sets the variables of a lastprivate clause of an OpenMP pragma">
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setShared" class="omp" tooltip="Sets the variables of a shared clause of an OpenMP pragma">
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setCopyin" class="omp" tooltip="Sets the variables of a copyin clause of an OpenMP pragma">
		<parameter name="newVariables" type="String[]" />
	</action>
	<action name="setScheduleKind" class="omp" tooltip="Sets the value of the schedule clause of an OpenMP pragma">
		<parameter name="scheduleKind" type="String" />
	</action>
	<action name="setScheduleChunkSize" class="omp" tooltip="Sets the value of the chunck size in the schedule clause of an OpenMP pragma. Can only be called if there is already a schedule clause in the directive, otherwise throws an exception">
		<parameter name="chunkSize" type="String" />
	</action>
	<action name="setScheduleModifiers" class="omp" tooltip="Sets the value of the modifiers in the schedule clause of an OpenMP pragma. Can only be called if there is already a schedule clause in the directive, otherwise throws an exception">
		<parameter name="modifiers" type="String[]" />
	</action>
	<action name="setCollapse" class="omp" tooltip="Sets the value of the collapse clause of an OpenMP pragma">
		<parameter name="newExpr" type="String" />
	</action>
	<action name="setOrdered" class="omp" tooltip="Sets an ordered clause without parameters in the OpenMP pragma"/>
	<action name="setOrdered" class="omp" tooltip="Sets the value of the ordered clause of an OpenMP pragma">
		<parameter name="newExpr" type="String" />
	</action>
	
	<!-- PRAGMA -->
	<action name="setName" class="pragma">
		<parameter name="name" type="String" />
	</action>
	
	<action name="setContent" class="pragma">
		<parameter name="content" type="String" />
	</action>
	
	<!-- VARDECL -->
	<action name="setInit" class="vardecl">
		<parameter name="init" type="joinpoint" />
	</action>
	
	<action name="setInit" class="vardecl">
		<parameter name="init" type="String" />
	</action>
	
	
	<!-- FUNCTION -->
	<action name="setName" class="function">
		<parameter name="name" type="String" />
	</action>
	
	
	<!-- FUNCTION TYPE -->
	<action name="setReturnType" class="functionType" tooltip="Sets the return type of the FunctionType">
		<parameter name="newType" type="type" />
	</action>
	
	
</actions>
