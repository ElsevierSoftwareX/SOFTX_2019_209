import lara.Io;
import lara.cmake.CMaker;
import clava.Clava;

aspectdef CMakerTest

	var cmaker = new CMaker("testapp")
		.setMinimumVersion("3.0.2")
		.setGenerator("MinGW Makefiles")
		.setMakeCommand("mingw32-make")
		.addCxxFlags("-O3", "-std=c++11")
		.addLibs("stdc++");

	select file end
	apply
		cmaker.sources.addSource($file.relativeFilepath);
		
		if($file.isHeader) {
			cmaker.addIncludeFolder($file.relativeFolderpath);
		}
	end
	
	// Write AST code
	Clava.writeCode(Clava.getWeavingFolder());
	
	// Build
	var buildFolder = Io.getPath(Clava.getWeavingFolder(), "build");
	var executable = cmaker.build(Clava.getWeavingFolder(), buildFolder);

	println("Created executable: " + executable);
end

	// Writing the build file
	//var cmakeFile = Io.getPath(Clava.getWeavingFolder(), "CMakeLists.txt");
	//Io.writeFile(cmakeFile, cmaker.getCode());
